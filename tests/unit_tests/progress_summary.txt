5/12/20. 

Figured out unit testing with AWS stubs and mock, so that we never actually make API calls to the clould. The methods here should be: 
For AWS CLIENT tests: use the botocore Stubber. The client will only ever deliver responses, that are either processed, or just need to work as stand ins. You can find an example of how this works in test_mkdir_exists and test_mkdir_not_exists in the test_jobmanage_utils module. 
For AWS RESOURCE tests: we need to use the unittest.mock module. I have made a test bucket that works for the utilsparam.s3.exists function, in the module test_s3_mock_resources. We will need to flesh this out and extend it. Luckily, it looks like the only modules that require the aws resources are the s3 and ec2 modules.  

More thoughts: 
- eventually, we should move up the tests into the global testim module where the travis tests are stored, unless it's a real pain to move them based on package structure/import paths. 
- this is an exciting path going forwards- writing these tests should be one thing you do more going forwards now that the most annoying aspects are figured out.  

Links: 
# stubber: 
https://botocore.amazonaws.com/v1/documentation/api/latest/reference/stubber.html
# mocks:
https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch

7/10/20.

The basic S3 utilsparam unit tests are done and working. This leaves the logger objects (do we still need them all?), and then higher level things to test. We need to figure out if it's important to stub/mock everything in the utils module to test something in the main code (submit_start, helper, etc.). People seem ideologically split on this, when not taking into the account we would have to call s3 resources. The most important step is just to look more at that code so you can figure out what's possible/feasible.  
Important changes: added coverage module: 
run: 
coverage run --source=../../ncap_iac -m pytest test_jobmanager_utils.py
also: 
coverage report -m
for coverage reports. 
