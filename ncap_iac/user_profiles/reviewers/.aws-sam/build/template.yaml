Outputs:
  AccessKeyeditornn:
    Description: 'Access Key of user: editornn in group reviewersnn'
    Value:
      Ref: userkeyeditornn
  Passwordeditornn:
    Description: Default password of new user editornn in group reviewersnn
    Value: ab1162c9faf201cf
  SecretAccessKeyeditornn:
    Description: 'Secret Key of new user: editornn in group reviewersnn'
    Value:
      Fn::GetAtt:
      - userkeyeditornn
      - SecretAccessKey
Resources:
  DeleteCustomResourcereviewersnn:
    DependsOn: PipelineBucketreviewersnn
    Properties:
      BucketName: reviewersnn
      ServiceToken:
        Fn::GetAtt:
        - S3DelObjectFunction
        - Arn
    Type: AWS::CloudFormation::CustomResource
  LambdaBaseRole:
    Properties:
      Description:
        Fn::Join:
        - ' '
        - - Base Policy for all lambda function roles in
          - Ref: AWS::StackName
      PolicyDocument:
        Statement:
        - Action:
          - logs:CreateLogGroup
          - logs:CreateLogStream
          - logs:PutLogEvents
          Effect: Allow
          Resource: arn:aws:logs:*:*:*
        Version: '2012-10-17'
    Type: AWS::IAM::ManagedPolicy
  PipelineBucketreviewersnn:
    Properties:
      AccessControl: Private
      BucketName: reviewersnn
    Type: AWS::S3::Bucket
  S3DelObjectFunction:
    Properties:
      CodeUri: S3DelObjectFunction
      Description: Deletes Objects from S3
      Environment:
        Variables:
          EXECUTION_TIMEOUT: '172800'
          IAM_ROLE: iam role with ssm and s3 access
          INDIR: inputs
          LOGDIR: logs
          LOGFILE: lambda_log.txt
          MONITOR: true
          OUTDIR: results
          REGION: us-east-1
          SECURITY_GROUPS: Type of instance to launch.
      Handler: helper.handler_deldir
      Role:
        Fn::GetAtt:
        - S3MakePathRole
        - Arn
      Runtime: python3.6
      Timeout: 30
    Type: AWS::Serverless::Function
  S3MakePathRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - Ref: LambdaBaseRole
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - s3:DeleteObject
            - s3:ListBucket
            - s3:PutObject
            Effect: Allow
            Resource: '*'
          Version: '2012-10-17'
        PolicyName: write_s3_policy
    Type: AWS::IAM::Role
  S3PutObjectFunction:
    Properties:
      CodeUri: S3PutObjectFunction
      Description: Puts Objects in S3
      Environment:
        Variables:
          EXECUTION_TIMEOUT: '172800'
          IAM_ROLE: iam role with ssm and s3 access
          INDIR: inputs
          LOGDIR: logs
          LOGFILE: lambda_log.txt
          MONITOR: true
          OUTDIR: results
          REGION: us-east-1
          SECURITY_GROUPS: Type of instance to launch.
      Handler: helper.handler_mkdir
      Role:
        Fn::GetAtt:
        - S3MakePathRole
        - Arn
      Runtime: python3.6
      Timeout: 30
    Type: AWS::Serverless::Function
  reviewersnnusereditornn:
    Properties:
      LoginProfile:
        Password: ab1162c9faf201cf
        PasswordResetRequired: 'false'
      Path: /reviewersnn/
      UserName: editornnus-east-1
    Type: AWS::IAM::User
  userkeyeditornn:
    Properties:
      UserName:
        Ref: reviewersnnusereditornn
    Type: AWS::IAM::AccessKey
Transform: AWS::Serverless-2016-10-31
